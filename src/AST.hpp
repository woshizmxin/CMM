/*
    AST.hpp
    =======
        Struct __AST implementation.
*/

#pragma once

#include <string>
#include <vector>
#include "AST.h"
#include "TokenType.hpp"
#include "Token.h"

namespace CMM
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Using
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using std::string;
using std::vector;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<<<<<<< HEAD
AST::AST(TokenType tokenType, const string &tokenStr, const vector<AST *> &subList, int lineNo):
=======
__AST::__AST(__TokenType tokenType, const string &tokenStr, const vector<__AST *> &subList, int lineNo):
>>>>>>> 0c0e907012a412af040951cada6b8da33e61e29a
    __tokenType(tokenType),
    __tokenStr (tokenStr),
    __subList  (subList),
    __lineNo   (lineNo) {}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor (With tokenPtr)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__AST::__AST(const __Token *tokenPtr):
    __tokenType(tokenPtr->__tokenType),
    __tokenStr (tokenPtr->__tokenStr),
    __lineNo   (tokenPtr->__lineNo) {}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<<<<<<< HEAD
// Getter: __tokenType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TokenType AST::tokenType() const
{
    return __tokenType;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __tokenStr
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string &AST::tokenStr()
{
    return __tokenStr;
}


const string &AST::tokenStr() const
{
    return __tokenStr;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __subList
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vector<AST *> &AST::subList()
{
    return __subList;
}


const vector<AST *> &AST::subList() const
{
    return __subList;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __lineNo
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int AST::lineNo() const
{
    return __lineNo;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
=======
>>>>>>> 0c0e907012a412af040951cada6b8da33e61e29a
// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__AST::~__AST()
{
    for (auto subPtr: __subList)
    {
        delete subPtr;
    }
}


}  // End namespace CMM
